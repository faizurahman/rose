#include "simpleA++.h"

void redBlackRelax3DNonFullyVariational(class floatArray &s,class floatArray &rhs)
{
  int rhs_length_3 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (2);
  int rhs_length_2 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (1);
  int rhs_length_1 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (0);
  int rhs_stride_3 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[2];
  int rhs_stride_2 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[1];
  int rhs_stride_1 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[0];
  int rhs_size_3 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[2];
  int rhs_size_2 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[1];
  int rhs_size_1 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[0];
  float *rhs_pointer = rhs. getDataPointer ();
  int s_length_3 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (2);
  int s_length_2 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (1);
  int s_length_1 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (0);
  int s_stride_3 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[2];
  int s_stride_2 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[1];
  int s_stride_1 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[0];
  int s_size_3 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[2];
  int s_size_2 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[1];
  int s_size_1 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[0];
  float *s_pointer = s. getDataPointer ();
  int gridSize = s. length (0);
  class Index Black_Odd(1,_var_3 = ((gridSize - 1) / 2),2);
  class Index Black_Even(2,_var_8 = ((gridSize - 2) / 2),2);
  class Index Red_Odd(1,((gridSize - 1) / 2),2);
  class Index Red_Even(2,((gridSize - 2) / 2),2);
  class Index Odd_Rows(1,_var_4 = ((gridSize - 1) / 2),2);
  class Index Even_Rows(2,_var_9 = ((gridSize - 2) / 2),2);
  double hSqr = (1.0 / ((double )(gridSize * gridSize)));
{
    int _var_2;
    int _var_1;
    int _var_0;
    int _var_3;
    int _var_4;
    int _var_8;
    int _var_9;
    for (_var_2 = 0; _var_2 <= -1 + _var_4; _var_2 += 1) {
      for (_var_1 = 0; _var_1 <= -1 + _var_4; _var_1 += 1) {
        for (_var_0 = 0; _var_0 <= -1 + _var_3; _var_0 += 1) {
          s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_2 * 2 + 1) * s_stride_2 * s_size_2] = (hSqr * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_2 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_2 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_2 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_2 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_2 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_2 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_2 * 2) * s_stride_2 * s_size_2]) / 6.0;
        }
      }
    }
  }
{
    int _var_7;
    int _var_6;
    int _var_5;
    for (_var_7 = 0; _var_7 <= -1 + _var_4; _var_7 += 1) {
      for (_var_6 = 0; _var_6 <= -1 + _var_9; _var_6 += 1) {
        for (_var_5 = 0; _var_5 <= -1 + _var_8; _var_5 += 1) {
          s_pointer[_var_5 * 2 + 2 + (_var_6 * 2 + 2) * s_stride_1 * s_size_1 + (_var_7 * 2 + 1) * s_stride_2 * s_size_2] = (hSqr * rhs_pointer[_var_5 * 2 + 2 + (_var_6 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_7 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_5 * 2 + (_var_6 * 2 + 2) * s_stride_1 * s_size_1 + (_var_7 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_5 * 2 + (_var_6 * 2 + 2) * s_stride_1 * s_size_1 + (_var_7 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_5 * 2 + 2 + (2 + 1 + _var_6 * 2) * s_stride_1 * s_size_1 + (_var_7 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_5 * 2 + 2 + (2 - 1 + _var_6 * 2) * s_stride_1 * s_size_1 + (_var_7 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_5 * 2 + 2 + (_var_6 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_7 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_5 * 2 + 2 + (_var_6 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_7 * 2) * s_stride_2 * s_size_2]) / 6.0;
        }
      }
    }
  }
{
    int _var_12;
    int _var_11;
    int _var_10;
    for (_var_12 = 0; _var_12 <= -1 + _var_9; _var_12 += 1) {
      for (_var_11 = 0; _var_11 <= -1 + _var_4; _var_11 += 1) {
        for (_var_10 = 0; _var_10 <= -1 + _var_3; _var_10 += 1) {
          s_pointer[_var_10 * 2 + 1 + (_var_11 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = (hSqr * rhs_pointer[_var_10 * 2 + 1 + (_var_11 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_10 * 2 + (_var_11 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_10 * 2 + (_var_11 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_10 * 2 + 1 + (1 + 1 + _var_11 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_10 * 2 + 1 + (1 - 1 + _var_11 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_10 * 2 + 1 + (_var_11 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_10 * 2 + 1 + (_var_11 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / 6.0;
        }
      }
    }
  }
{
    int _var_15;
    int _var_14;
    int _var_13;
    for (_var_15 = 0; _var_15 <= -1 + _var_9; _var_15 += 1) {
      for (_var_14 = 0; _var_14 <= -1 + _var_9; _var_14 += 1) {
        for (_var_13 = 0; _var_13 <= -1 + _var_8; _var_13 += 1) {
          s_pointer[_var_13 * 2 + 2 + (_var_14 * 2 + 2) * s_stride_1 * s_size_1 + (_var_15 * 2 + 2) * s_stride_2 * s_size_2] = (hSqr * rhs_pointer[_var_13 * 2 + 2 + (_var_14 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_15 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_13 * 2 + (_var_14 * 2 + 2) * s_stride_1 * s_size_1 + (_var_15 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_13 * 2 + (_var_14 * 2 + 2) * s_stride_1 * s_size_1 + (_var_15 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_13 * 2 + 2 + (2 + 1 + _var_14 * 2) * s_stride_1 * s_size_1 + (_var_15 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_13 * 2 + 2 + (2 - 1 + _var_14 * 2) * s_stride_1 * s_size_1 + (_var_15 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_13 * 2 + 2 + (_var_14 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_15 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_13 * 2 + 2 + (_var_14 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_15 * 2) * s_stride_2 * s_size_2]) / 6.0;
        }
      }
    }
  }
}
