//#include <A++.h>
#include "simpleA++.h"

void interpolate1D(class floatArray &fineGrid,class floatArray &coarseGrid)
{
  int coarseGrid_length_1 = coarseGrid.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (0);
  int coarseGrid_stride_1 = coarseGrid.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[0];
  int coarseGrid_size_1 = coarseGrid.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[0];
  float *coarseGrid_pointer = coarseGrid. getDataPointer ();
  int fineGrid_length_1 = fineGrid.floatArray::Array_Descriptor.DescriptorType::Array_Domain. getLength (0);
  int fineGrid_stride_1 = fineGrid.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[0];
  int fineGrid_size_1 = fineGrid.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[0];
  float *fineGrid_pointer = fineGrid. getDataPointer ();
  int fineGridSize = fineGrid. length (0);
  int coarseGridSize = coarseGrid. length (0);
// Interior fine points
  class Range If(2,_var_1 = (fineGridSize - 2),2);
  class Range Ic(1,(coarseGridSize - 1),1);
{
    int _var_0;
    int _var_1;
    for (_var_0 = 0; _var_0 <= -1 + (_var_1 + -1) / 2; _var_0 += 1) {
      fineGrid_pointer[_var_0 * 2 + 2] = coarseGrid_pointer[_var_0 * 1 + 1];
    }
  }
{
    int _var_2;
    for (_var_2 = 0; _var_2 <= -1 + (_var_1 + -1) / 2; _var_2 += 1) {
      fineGrid_pointer[2 - 1 + _var_2 * 2] = (coarseGrid_pointer[1 - 1 + _var_2 * 1] + coarseGrid_pointer[_var_2 * 1 + 1]) / 2.0;
    }
  }
}
